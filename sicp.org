#+TITLE: sicp
#+PROPERTY: header-args:racket :lang sicp

* Chapter 2
** Sets
#+NAME: set_definitions
#+BEGIN_SRC racket
(define (element-of-set? x set)
  (cond ((null? set) false)
        ((equal? x (car set)) true)
        (else (element-of-set? x (cdr set)))))

(define (adjoin-set x set)
  (if (element-of-set? x set)
      set
      (cons x set)))

(define (intersection-st set1 set2)
  (cond ((or (null? set1) (null? set2)) '())
        ((element-of-set? (car set1) set2) (cons (car set1) (intersection-set (cdr set1) set2)))
        (else (intersection-set (cdr set1) set2))))
#+END_SRC

#+RESULTS: set_definitions

Lets run some basic tests

#+NAME: set_intersection_tests
#+begin_src racket :noweb yes
<<set_definitions>>
(define set1 (list 1 2 3 4 5))
(define set2 (list 3 4 5 6 7))
(intersection-set set1 set2)
#+end_src

#+RESULTS: set_intersection_tests
: (3 4 5)


*** Exercise 2.50
#+NAME: set_union
#+begin_src racket :noweb yes
<<set_definitions>>
(define (union-set set1 set2)
  (cond ((null? set1) set2)
        ((null? set2) set1)
        ((element-of-set? (car set1) set2) (union-set (cdr set1) set2))
        (else (cons (car set1) (union-set (cdr set1) set2)))))
#+end_src

#+RESULTS: set_union

Tests to check
#+begin_src racket :noweb yes
<<set_union>>
(define set1 (list 1 2 3 4 5))
(define set2 (list 3 4 5 6 7))
(union-set set1 set2)
#+end_src

#+RESULTS:
: (1 2 3 4 5 6 7)

** Sets as ordered lists

#+NAME: ordered_set_definitions
#+BEGIN_SRC racket :results none
(define (element-of-set? x set)
  (cond ((null? set) false)
        ((= (car set) x) true)
        ((< (car set) x) false)
        (else (element-of-set? x (cdr set)))))

(define (intersection-set set1 set2)
  (if (or (null? set1) (null? set2))
      '()
      (let
          ((x1 (car set1))
           (x2 (car set2)))
        (cond ((= x1 x2)
               (cons x1 (intersection-set
                         (cdr set1) (cdr set2))))
              ((< x1 x2)
               (intersection-set (cdr set1) set2))
              ((> x1 x2)
               (intersection-set set1 (cdr set2))))))
  )
#+END_SRC

*** Exercise 2.61
We define adjoin-set similar to element-of-set.
#+NAME: ordered_adjoin_set
#+begin_src racket :noweb yes :result none

<<ordered_set_definitions>>
(define (adjoin-set x set)
  (cond ((null? set) (list x))
        ((= (car set) x) set)
        ((> (car set) x) (cons x set))
        (else (cons (car set) (adjoin-set x (cdr set))))))
#+end_src

#+RESULTS: ordered_adjoin_set

Tests

#+begin_src racket :noweb yes
<<ordered_adjoin_set>>
(define set1 (list 1 2 4 5))
(adjoin-set 3 set1)
(adjoin-set 0 set1)
(adjoin-set 6 set1)
#+end_src
** Sets as binary trees

#NAME: tree_set_definitions
#+begin_src racket :noweb yes :result none
(define (entry tree) (car tree))
(define (left-branch tree) (cadr tree))
(define (right-branch tree) (caddr tree))
(define (make-tree entry left right) (list entry left right))

(define (element-of-set? x set)
  (cond ((null? set) false)
        ((= (entry set) x) true)
        ((< x (entry set)) (element-of-set? x (left-branch set)))
        ((> x (entry set)) (element-of-set? x (right-branch set)))))
(define (adjoin-set x set)
  (cond ((null? set) (make-tree x
                                '()
                                '()))
        ((= x (entry set)) set)
        ((< x (entry set))
         (make-tree (entry set)
                    (adjoin-set x (left-branch set))
                    (right-branch set)))
        ((> x (entry set))
         (make-tree (entry set)
                    (left-branch set)
                    (adjoin-set x (right-branch set))))))

#+end_src

#+RESULTS:

*** Exercise 2.63
- Both the procedures return the same result,which is the post order traversal.
- Append is an O(n) operation and hence definition 1 grows faster.
*** Exercise 2.64
- Skipping this because it is redundant.
