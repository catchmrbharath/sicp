#+TITLE: sicp
#+PROPERTY: header-args:racket :lang sicp

* Chapter 2
** Sets
#+NAME: set_definitions
#+BEGIN_SRC racket
(define (element-of-set? x set)
  (cond ((null? set) false)
        ((equal? x (car set)) true)
        (else (element-of-set? x (cdr set)))))

(define (adjoin-set x set)
  (if (element-of-set? x set)
      set
      (cons x set)))

(define (intersection-st set1 set2)
  (cond ((or (null? set1) (null? set2)) '())
        ((element-of-set? (car set1) set2) (cons (car set1) (intersection-set (cdr set1) set2)))
        (else (intersection-set (cdr set1) set2))))
#+END_SRC

#+RESULTS: set_definitions

Lets run some basic tests

#+NAME: set_intersection_tests
#+begin_src racket :noweb yes
<<set_definitions>>
(define set1 (list 1 2 3 4 5))
(define set2 (list 3 4 5 6 7))
(intersection-set set1 set2)
#+end_src

#+RESULTS: set_intersection_tests
: (3 4 5)


*** Exercise 2.50
#+NAME: set_union
#+begin_src racket :noweb yes
<<set_definitions>>
(define (union-set set1 set2)
  (cond ((null? set1) set2)
        ((null? set2) set1)
        ((element-of-set? (car set1) set2) (union-set (cdr set1) set2))
        (else (cons (car set1) (union-set (cdr set1) set2)))))
#+end_src

#+RESULTS: set_union

Tests to check
#+begin_src racket :noweb yes
<<set_union>>
(define set1 (list 1 2 3 4 5))
(define set2 (list 3 4 5 6 7))
(union-set set1 set2)
#+end_src

#+RESULTS:
: (1 2 3 4 5 6 7)

** Sets as ordered lists

#+NAME: ordered_set_definitions
#+BEGIN_SRC racket :results none
(define (element-of-set? x set)
  (cond ((null? set) false)
        ((= (car set) x) true)
        ((< (car set) x) false)
        (else (element-of-set? x (cdr set)))))

(define (intersection-set set1 set2)
  (if (or (null? set1) (null? set2))
      '()
      (let
          ((x1 (car set1))
           (x2 (car set2)))
        (cond ((= x1 x2)
               (cons x1 (intersection-set
                         (cdr set1) (cdr set2))))
              ((< x1 x2)
               (intersection-set (cdr set1) set2))
              ((> x1 x2)
               (intersection-set set1 (cdr set2))))))
  )
#+END_SRC

*** Exercise 2.61
We define adjoin-set similar to element-of-set.
#+NAME: ordered_adjoin_set
#+begin_src racket :noweb yes :result none

<<ordered_set_definitions>>
(define (adjoin-set x set)
  (cond ((null? set) (list x))
        ((= (car set) x) set)
        ((> (car set) x) (cons x set))
        (else (cons (car set) (adjoin-set x (cdr set))))))
#+end_src

#+RESULTS: ordered_adjoin_set

Tests

#+begin_src racket :noweb yes
<<ordered_adjoin_set>>
(define set1 (list 1 2 4 5))
(adjoin-set 3 set1)
(adjoin-set 0 set1)
(adjoin-set 6 set1)
#+end_src
** Sets as binary trees

#NAME: tree_set_definitions
#+begin_src racket :noweb yes :result none
(define (entry tree) (car tree))
(define (left-branch tree) (cadr tree))
(define (right-branch tree) (caddr tree))
(define (make-tree entry left right) (list entry left right))

(define (element-of-set? x set)
  (cond ((null? set) false)
        ((= (entry set) x) true)
        ((< x (entry set)) (element-of-set? x (left-branch set)))
        ((> x (entry set)) (element-of-set? x (right-branch set)))))
(define (adjoin-set x set)
  (cond ((null? set) (make-tree x
                                '()
                                '()))
        ((= x (entry set)) set)
        ((< x (entry set))
         (make-tree (entry set)
                    (adjoin-set x (left-branch set))
                    (right-branch set)))
        ((> x (entry set))
         (make-tree (entry set)
                    (left-branch set)
                    (adjoin-set x (right-branch set))))))

#+end_src

#+RESULTS:

*** Exercise 2.63
- Both the procedures return the same result,which is the post order traversal.
- Append is an O(n) operation and hence definition 1 grows faster.
*** Exercise 2.64
- Skipping this because it is redundant.

** Huffman Encoding trees.

#+begin_src racket
(define (make-leaf symbol weight)
  (list 'leaf symbol weight))

(define (leaf? object)
  (eq? (car object) 'leaf))

(define (symbol-leaf object) (cadr object))

(define (symbol-weight object) (caddr object))


(define (make-code-tree left right)
  (list left
        right
        (append (symbols left) (symbols right))
        (+ (weight left) (weight right))))

(define (left-branch tree)
  (car tree))

(define (right-branch tree)
  (cadr tree))

(define (symbols tree)
  (if (leaf? tree)
      (list (symbol-leaf tree))
      (caddr tree)))

(define (weight tree)
  (if (leaf? tree)
      (symbol-weight tree)
      (cadddr tree)))

(define (decode bits tree)
  (define (decode-1 bits current-branch)
    (if (null? bits)
        '()
        (let ((next-branch
               (choose-branch (car bits)
                              current-branch)))
          (if (leaf? next-branch)
              (cons
               (symbol-leaf next-branch)
               (decode-1 (cdr bits) tree))
              (decode-1 (cdr bits)
                        next-branch)))))
  (decode-1 bits tree)
  )

(define (choose-branch bit branch)
  (cond ((= 0 bit) (left-branch branch))
        ((= 1 bit) (right-branch branch))
        (else (error "bad bit: CHOOSE BRANCH" bit))))

(define (adjoin-set x set)
  (cond ((null? set) (list x))
        ((< (weight x) (weight (car set)))
         (cons x set))
        (else
         (cons (car set) (adjoin-set x (cdr set))))))

(define sample-tree
  (make-code-tree
   (make-leaf 'A 4)
   (make-code-tree
    (make-leaf 'B 2)
    (make-code-tree
     (make-leaf 'D 1)
     (make-leaf 'C 1)))))

(define sample-message
  '(0 1 1 0 0 1 0 1 0 1 1 1 0))

(decode sample-message sample-tree)

(define (element-of-set? symbol symbol-set)
  (cond ((null? symbol-set) false)
        ((equal? symbol (car symbol-set)) true)
        (else (element-of-set? symbol (cdr symbol-set)))))

(define (encode message tree)
  (if (null? message)
      '()
      (append
       (encode-symbol (car message)
                      tree)
       (encode (cdr message) tree))))

(define (encode-symbol symbol tree)
  (define (encode-symbol-helper symbol tree)
    (cond ((leaf? tree) '())
          ((element-of-set? symbol (symbols (left-branch tree)))
           (cons 0 (encode-symbol-helper symbol (left-branch tree))))
          (else (cons 1 (encode-symbol-helper symbol (right-branch tree))))))
  (if (element-of-set? symbol (symbols tree))
      (encode-symbol-helper symbol tree)
      (error "trying to encode non existent symbol"))
  )


(define (accumulate op initial sequence)
  (if (null? sequence)
    initial
    (op (car sequence)
        (accumulate op initial (cdr sequence)))))

(define (flatmap proc seq)
  (accumulate append nil (map proc seq)))

(define (encode-symbol-list symbol-list tree)
  (flatmap (lambda (x) (encode-symbol x tree)) symbol-list))

(define (make-leaf-set pairs)
  (if (null? pairs)
      '()
      (let ((pair (car pairs)))
        (adjoin-set
         (make-leaf (car pair)    ; symbol
                    (cadr pair))  ; frequency
         (make-leaf-set (cdr pairs)))))
  )

(define (generate-huffman-tree pairs)
  (successive-merge
   (make-leaf-set pairs)))

(define (successive-merge tree-set)
  (if (null? (cdr tree-set))
      (car tree-set)
      (let ((tree1 (car tree-set))
            (tree2 (cadr tree-set)))
        (successive-merge (adjoin-set
                           (make-code-tree tree1 tree2) (cddr tree-set)))))
  )

#+end_src

#+RESULTS:
: (A D A B B C A)

** Representation of complex numbers
